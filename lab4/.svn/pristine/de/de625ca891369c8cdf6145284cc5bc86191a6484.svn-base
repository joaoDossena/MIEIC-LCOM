// IMPORTANT: you must include the following line in all your C files
#include <lcom/lcf.h>
#include <stdint.h>
#include <stdio.h>

#include "kbc.h"
#include "mouse.h"
#include "i8042.h"
#include "i8254.h"
// Any header files included below this line should have been created by you
uint16_t byte_packet[3];
uint32_t byte;
uint32_t packet_counter = 0;
struct packet pp;
uint32_t status;

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need/ it]
  lcf_trace_calls("/home/lcom/labs/lab4/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab4/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}


int (mouse_test_packet)(uint32_t cnt) {
  int ipc_status;
  message msg;
  uint32_t r;
  int pos = 1;
  uint8_t irq_set;

  if (mouse_subscribe_int(&irq_set) != 0)
    return 1;

  while (packet_counter < cnt) {
    if ((r = driver_receive(ANY,&msg,&ipc_status)) != 0) {
      printf("driver_receive failed wih: %d", r);
      continue;
    }
    if (is_ipc_notify(ipc_status)) { /* received notification */
      switch(_ENDPOINT_P(msg.m_source)) {
        case HARDWARE:
          if (msg.m_notify.interrupts & irq_set) {
            // do something

            mouse_ih();
            if (pos == 1)
            {
              if(status & BIT(3))
              {
                byte_packet[0] = status;
                pos++;
              }
            }
            else if (pos == 2)
            {
              byte_packet[1] = status;
              pos++;
            }
            else if (pos == 3)
            {
              byte_packet[2] = status;
              packet_create();
              mouse_print_packet(&pp);

              packet_counter += 1;
              pos = 1;
            }

          }
          break;
        default:
          break;
      }
    }
  }

  if (mouse_unsubscribe_int() != 0)
    return 1;

  return 0;
}

int (mouse_test_remote)(uint16_t period, uint8_t cnt) {
    /* To be completed */
    printf("%s(%u, %u): under construction\n", __func__, period, cnt);
    return 1;
}

int (mouse_test_async)(uint8_t idle_time) {
    /* To be completed */
    printf("%s(%u): under construction\n", __func__, idle_time);
    return 1;
}

int (mouse_test_gesture)(uint8_t x_len, uint8_t tolerance) {
    /* To be completed */
    printf("%s: under construction\n", __func__);
    return 1;
}
