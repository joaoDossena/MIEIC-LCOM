#include "mouse.h"

int hook_id_mouse = 2;
extern uint32_t status;
extern struct packet pp;
extern uint16_t packet[3];

int (mouse_subscribe_int)(uint8_t *bit_no)
{
  *bit_no = hook_id_mouse;

  //checks if the sys call was valid
  if (sys_irqsetpolicy(MOUSE_IRQ, (IRQ_REENABLE | IRQ_EXCLUSIVE), &hook_id_mouse) != OK)
    return 1;

  return 0;
}

int mouse_unsubscribe_int()
{
  if (sys_irqrmpolicy(&hook_id_mouse) != 0)
    return 1;

  return 0;
}

void (mouse_ih)() 
{
  uint32_t status_reg;

  if (sys_inb(STAT_REG, &status_reg) != 0)// Gets status
    return;

  if ((status_reg & OBF_FULL)==OBF_FULL) { // Checks if Out_buffer is full. It needs to be in order to read data from it
    
    if (sys_inb(OUT_BUF, &status) != 0) // Retrieve data from output buffer
      return;

    if ((status_reg & (PARITY_ERROR | TIMEOUT_ERROR)) == 0)
      return;
    else
      return; // parity or timeout error
  }
  return;
}

void packet_create()
{
  pp.bytes[0] = packet[0];
  pp.bytes[1] = packet[1];
  pp.bytes[2] = packet[2];

  pp.lb = (packet[0] & MOUSE_LB);
  pp.rb = (packet[0] & MOUSE_RB) >> 1;
  pp.mb = (packet[0] & MOUSE_MB) >> 2;

  if((packet[0] & MOUSE_XSIGN) >> 4 == 0)
  {
    pp.delta_x = (packet[1] & 0x00FF);
  }
  else
  {
    pp.delta_x = (packet[1] | 0xFF00); 
    }
  
  if((packet[0] & MOUSE_YSIGN) >> 5 == 0)
  {
    pp.delta_y = (packet[2] & 0x00FF);
  }
  else
  {
    pp.delta_y = (packet[2] | 0xFF00); 
    }
  
  pp.x_ov = (packet[0] & MOUSE_XOVF) >> 6;
  pp.y_ov = (packet[0] & MOUSE_YOVF) >> 7;
}

int write_mouse(uint32_t command) {

  uint32_t data;

  while (1) {
    if (write_kbc(STAT_REG, WRITE_MOUSE) == 1)
      return 1;

    if (write_kbc(OUT_BUF, command) == 1)
      return 1;

    sys_inb(OUT_BUF, &data);

    if (data == MOUSE_ACK)
      return 0;
    }
}

int read_kbc(uint32_t * data) {
  uint32_t stat;
  while (1) {
    if (sys_inb(STAT_REG, &stat))
      return 1;

    if (stat & OBF_FULL)
      return sys_inb(OUT_BUF, data);
    
    tickdelay(micros_to_ticks(DELAY_US));
  }
}

int write_kbc(uint32_t port, uint32_t cmd) {
  uint32_t stat;
  while (1) {
    sys_inb(STAT_REG, &stat);
      
    if ((stat & IBF_FULL) == 0)
      return sys_outb(port, cmd);
  
    tickdelay(micros_to_ticks(DELAY_US));    
  }
}

int check_gesture(uint8_t x_len) {

  // TO DO
  return 1; // Gesture completed
}
