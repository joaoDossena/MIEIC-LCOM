#include <lcom/lcf.h>

#include <lcom/lab3.h>

#include <stdbool.h>
#include <stdint.h>

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need it]
  lcf_trace_calls("/home/lcom/labs/lab3/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab3/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}


int(kbd_test_scan)() {
  
  message msg;
  int ipc_status;
  uint32_t r;
  uint8_t bit_no;
  if((kbc_subscribe_int(&bit_no)) != 0) // first subscribe the KBC interrupts
    return 1;

  // verify if a interrupt should be handled
  uint32_t irq_set = BIT(bit_no);

  while (true) {
    if ((r = driver_receive(ANY, &msg, &ipc_status)) != 0) {
      printf("driver_receive failed with: %d", r);
      continue;
    if (is_ipc_notify(ipc_status)) { //received notification
      switch (_ENDPOINT_P(msg.m_source)) {
        case HARDWARE: // hardware interrupt notification
          if (msg.m_notify.interrupts & irq_set) { //subscribed interrupt
            kbc_ih();

            if (interruptionCounter == 0) { // 1sec passsed?
              time--;
              timer_print_elapsed_time();
            }
          }
          break;
        default:
          break; //no other notifications expected: do nothing
      }
    } 
    else { /* do nothing */ }
  }
  /*

int ipc_status;
  message msg;
  uint32_t r;

  uint8_t bit_no;
  if((timer_subscribe_int(&bit_no)) != 0)
    return 1;

  // verify if a interrupt should be handled
  uint32_t irq_set = BIT(bit_no);

  while( time /*?*/ ) {
    /* Get a request message */
    if ((r = driver_receive(ANY, &msg, &ipc_status)) != 0) {
      printf("driver_receive failed with: %d", r);
      continue;
    }
    if (is_ipc_notify(ipc_status)) { //received notification
      switch (_ENDPOINT_P(msg.m_source)) {
        case HARDWARE: // hardware interrupt notification
          if (msg.m_notify.interrupts & irq_set) { //subscribed interrupt
            timer_int_handler(); // handle interrupt

            if (interruptionCounter == 0) { // 1sec passsed?
              time--;
              timer_print_elapsed_time();
            }
          }
          break;
        default:
          break; //no other notifications expected: do nothing
      }
    } 
    else { //received a standard message, not a notification
      // no standard messages expected: do nothing
    }
  }
  */



  kbc_unsubscribe_int();
  /*
Tests reading of scancodes via KBD interrupts.

Displays the scancodes received from the keyboard using interrupts.
Exits upon release of the ESC key
  */
  return 1;
}

int(kbd_test_poll)() {
  
  printf("%s is not yet implemented!\n", __func__);

  return 1;
}

int(kbd_test_timed_scan)(uint8_t n) {
  
  printf("%s is not yet implemented!\n", __func__);

  return 1;
}

/*
int (timer_subscribe_int)(uint8_t *bit_no) {
    if(bit_no == 0)
      return 1; //Testing for null pointer

    *bit_no = timerID;

    if(sys_irqsetpolicy(TIMER0_IRQ, IRQ_REENABLE, &timerID) != 0) //Subscribing timer interrupt while testing for error
      return 1; //If error subscribing timer interrupt

  return 0;
}

int (timer_unsubscribe_int)() {
  if(sys_irqrmpolicy(&timerID) != 0) //Unsubscribing timer interrupt while testing for error
    return 1; //If error unsubscribing timer interrupt

  return 0;
}

void (timer_int_handler)() {
  interruptionCounter++; //Increments the counter by 1
  interruptionCounter = interruptionCounter % 60; // make sure the value is between 0 and 59 (no doubts if overflow)
}
*/