// IMPORTANT: you must include the following line in all your C files
#include <lcom/lcf.h>
#include <lcom/lab5.h>
#include <stdint.h>
#include <stdio.h>
#include <machine/int86.h>

// Any header files included below this line should have been created by you
#include "video.h"
#include "vbe.h"
#include "kbc.h"

extern uint8_t scancode;
extern int kbcID;

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need it]
  lcf_trace_calls("/home/lcom/labs/lab5/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab5/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}

int(video_test_init)(uint16_t mode, uint8_t delay) {

  if (set_graphics_mode(mode) != 0)
    return 1; // configure the video card for the desired graphics mode, using VBE

  sleep(delay);

  if(vg_exit() != 0)
    return 1;

  return 0;
}

int(video_test_rectangle)(uint16_t mode, uint16_t x, uint16_t y,
                          uint16_t width, uint16_t height, uint32_t color) {
  
  if ((vg_init)(mode) == NULL)
  {
    vg_exit();
    return 1;
  }

  if (vg_draw_rectangle(x, y, width, height, color) != 0)
  {
    vg_exit();
    return 1;
  }

  int ipc_status;
  message msg;
  uint32_t r;

  uint8_t bit_no;
  if((kbc_subscribe_int(&bit_no)) != 0) // first subscribe the KBC interrupts
    return 1;

  // verify if a interrupt should be handled
  uint8_t irq_set = BIT(bit_no);

  while (scancode != ESC_BREAKCODE) {

    if ((r = driver_receive(ANY, &msg, &ipc_status)) != 0) {
      printf("driver_receive failed with: %d", r);
      continue;
    }
    if (is_ipc_notify(ipc_status)) {

      switch (_ENDPOINT_P(msg.m_source)) {
        case HARDWARE:

          if (msg.m_notify.interrupts & irq_set) { /* subscribed interrupt */

            kbc_ih();
          }
          break;
        default:
          break; /* no other notifications expected: do nothing */
      }
    }
  }

  if((kbc_unsubscribe_int()) != 0) // first subscribe the KBC interrupts
    return 1;

  if (vg_exit() != 0)
    return 1;

  return 0;
}

int(video_test_pattern)(uint16_t mode, uint8_t no_rectangles, uint32_t first, uint8_t step) {
  
  if (vg_init(mode) == 0)
    return 1;

  if (draw_pattern(mode, no_rectangles, first, step) != 0)
    return 1;

  int ipc_status;
  message msg;
  uint32_t r;

  uint8_t bit_no;
  if((kbc_subscribe_int(&bit_no)) != 0) // first subscribe the KBC interrupts
    return 1;

  // verify if a interrupt should be handled
  uint8_t irq_set = BIT(bit_no);

  while (scancode != ESC_BREAKCODE) {

    if ((r = driver_receive(ANY, &msg, &ipc_status)) != 0) {
      printf("driver_receive failed with: %d", r);
      continue;
    }
    if (is_ipc_notify(ipc_status)) {

      switch (_ENDPOINT_P(msg.m_source)) {
        case HARDWARE:

          if (msg.m_notify.interrupts & irq_set) { /* subscribed interrupt */

            kbc_ih();
          }
          break;
        default:
          break; /* no other notifications expected: do nothing */
      }
    }
  }

  if((kbc_unsubscribe_int()) != 0) // first subscribe the KBC interrupts
    return 1;

  if (vg_exit() != 0)
    return 1;

  return 0;
}

int(video_test_xpm)(xpm_map_t xpm, uint16_t x, uint16_t y) {
  
  if (vg_init(MODE_1024x768) != 0) // 0x105 VBE mode
    return 1;

  //xpm_map_t xmap;
  xpm_image_t img;
  uint8_t *map;
  // get the pixmap from the XPM
  map = xpm_load(xpm, XPM_INDEXED, &img);

  if (draw_pix_map(map, x, y, img.width, img.height) != 0)
    return 1;

  int ipc_status;
  message msg;
  uint32_t r;

  uint8_t bit_no;
  if((kbc_subscribe_int(&bit_no)) != 0) // first subscribe the KBC interrupts
    return 1;

  // verify if a interrupt should be handled
  uint8_t irq_set = BIT(bit_no);

  while (scancode != ESC_BREAKCODE) {

    if ((r = driver_receive(ANY, &msg, &ipc_status)) != 0) {
      printf("driver_receive failed with: %d", r);
      continue;
    }
    if (is_ipc_notify(ipc_status)) {

      switch (_ENDPOINT_P(msg.m_source)) {
        case HARDWARE:

          if (msg.m_notify.interrupts & irq_set) { /* subscribed interrupt */

            kbc_ih();
          }
          break;
        default:
          break; /* no other notifications expected: do nothing */
      }
    }
  }

  if((kbc_unsubscribe_int()) != 0) // first subscribe the KBC interrupts
    return 1;

  if (vg_exit() != 0)
    return 1;

  return 0;
}

int(video_test_move)(xpm_map_t xpm, uint16_t xi, uint16_t yi, uint16_t xf, uint16_t yf,
                     int16_t speed, uint8_t fr_rate) {
  return 0;

}

int(video_test_controller)() {
  /* To be completed */
  printf("%s(): under construction\n", __func__);

  return 1;
}
